version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "task-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Recreate wallet files from secrets"
    timeoutInSeconds: 300
    command: |
      # Crear directorios
      mkdir -p wallet
      
      # Funci√≥n para obtener secrets usando OCI CLI nativo
      get_secret() {
        local secret_id=$1
        local output_file=$2
      
        echo "Getting secret for: $(basename $output_file)"
      
        # Usar OCI CLI con query nativo
        local content=$(oci secrets secret-bundle get --secret-id "$secret_id" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$content" ]; then
          echo "WARNING: Failed to get secret $secret_id, creating empty file"
          touch "$output_file"
          return 1
        fi
      
        # Intentar decodificar de base64
        if echo "$content" | base64 -d > "$output_file" 2>/dev/null; then
          echo "‚úÖ Secret decoded for $(basename $output_file)"
        else
          echo "$content" > "$output_file"
          echo "‚úÖ Secret saved for $(basename $output_file)"
        fi
      }
      
      # Obtener todos los archivos del wallet
      echo "üìÅ Creating wallet files from secrets..."
      get_secret "$WALLET_CWALLET_SSO_OCID" "wallet/cwallet.sso" || true
      get_secret "$WALLET_TNSNAMES_ORA_OCID" "wallet/tnsnames.ora" || true
      get_secret "$WALLET_SQLNET_ORA_OCID" "wallet/sqlnet.ora" || true
      get_secret "$WALLET_EWALLET_P12_OCID" "wallet/ewallet.p12" || true
      get_secret "$WALLET_KEYSTORE_JKS_OCID" "wallet/keystore.jks" || true
      get_secret "$WALLET_OJDBC_PROPERTIES_OCID" "wallet/ojdbc.properties" || true
      get_secret "$WALLET_EWALLET_PEM_OCID" "wallet/ewallet.pem" || true
      get_secret "$WALLET_README_OCID" "wallet/README" || true
      get_secret "$WALLET_TRUSTSTORE_JKS_OCID" "wallet/truststore.jks" || true
      
      # Configurar permisos
      chmod 600 wallet/* 2>/dev/null || true
      
      echo "üìã Wallet files created:"
      ls -la wallet/

  - type: Command
    name: "Modify application.properties"
    timeoutInSeconds: 60
    command: |
      if [ -f "src/main/resources/application.properties" ]; then
        echo "üîß Modifying application.properties..."
      
        # Hacer una copia de respaldo
        cp src/main/resources/application.properties src/main/resources/application.properties.backup
      
        # Aplicar cambio para TNS_ADMIN
        sed -i 's|TNS_ADMIN=C:/Users/cesar/Wallet_TelegramBotDatabase|TNS_ADMIN=/wallet|g' src/main/resources/application.properties
      
        echo "‚úÖ application.properties modified successfully"
        echo "üìÑ New content:"
        cat src/main/resources/application.properties
      else
        echo "‚ö†Ô∏è application.properties not found, skipping modification"
      fi

  - type: Command
    name: "Install Java 23 and Build with Maven"
    timeoutInSeconds: 900
    command: |
      echo "üîß Installing Java 23 and building in same step..."
      
      # Instalar Java 23 directamente en este step
      cd /opt
      echo "üì• Downloading Java 23..."
      wget -q https://download.oracle.com/java/23/latest/jdk-23_linux-x64_bin.tar.gz
      
      if [ ! -f "jdk-23_linux-x64_bin.tar.gz" ]; then
        echo "‚ùå Failed to download Java 23, trying alternative mirror..."
        # Try alternative Java 23 source
        wget -q https://github.com/adoptium/temurin23-binaries/releases/download/jdk-23%2B37/OpenJDK23U-jdk_x64_linux_hotspot_23_37.tar.gz
        if [ -f "OpenJDK23U-jdk_x64_linux_hotspot_23_37.tar.gz" ]; then
          tar -xzf OpenJDK23U-jdk_x64_linux_hotspot_23_37.tar.gz
          JAVA_DIR=$(find /opt -maxdepth 1 -name "jdk-23*" -type d | head -1)
          echo "‚úÖ Using Java 23 from alternative source: $JAVA_DIR"
        else
          echo "‚ùå Cannot download Java 23, exiting..."
          exit 1
        fi
      else
        echo "‚úÖ Java 23 downloaded successfully"
        tar -xzf jdk-23_linux-x64_bin.tar.gz
        JAVA_DIR=$(find /opt -maxdepth 1 -name "jdk-23*" -type d | head -1)
        echo "‚úÖ Using Java 23: $JAVA_DIR"
      fi
      
      # Configurar Java inmediatamente
      export JAVA_HOME="$JAVA_DIR"
      export PATH="$JAVA_HOME/bin:$PATH"
      
      echo "‚òï Verifying Java installation:"
      java -version
      javac -version
      echo "üîß JAVA_HOME: $JAVA_HOME"
      echo "üîß PATH: $PATH"
      
      # Ir de vuelta al directorio del proyecto
      cd $OCI_PRIMARY_SOURCE_DIR
      
      echo "üìã Maven version:"
      mvn -version
      
      echo "üöÄ Building with Maven (exactly like GitHub Actions)..."
      
      # Usar exactamente el mismo comando que GitHub Actions - NO tests, NO compiler flags
      mvn clean package -DskipTests
      
      # Si Maven falla, intentar con actualizaci√≥n del compiler plugin
      if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è Standard build failed, trying with updated maven compiler plugin..."
        mvn clean package -DskipTests \
            -Dmaven.compiler.plugin.version=3.12.1 \
            -Dmaven.compiler.source=23 \
            -Dmaven.compiler.target=23 \
            -Dmaven.compiler.release=23
      fi
      
      echo "üì¶ Build completed, checking results:"
      ls -la target/
      
      # Verificaciones
      if [ ! -f "target/TaskService-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚ùå TaskService JAR file not found!"
        echo "Available files in target/:"
        ls -la target/ || echo "No target directory"
        exit 1
      fi
      
      JAR_SIZE=$(stat -c%s "target/TaskService-0.0.1-SNAPSHOT.jar" 2>/dev/null || stat -f%z "target/TaskService-0.0.1-SNAPSHOT.jar")
      echo "üì¶ JAR size: $JAR_SIZE bytes"
      
      if [ "$JAR_SIZE" -lt 1000000 ]; then
        echo "‚ö†Ô∏è JAR seems small for a Spring Boot app"
      fi
      
      echo "‚úÖ Maven build successful!"

  - type: Command
    name: "Prepare Docker build"
    timeoutInSeconds: 120
    command: |
      # Crear estructura de build
      mkdir -p build build/wallet
      
      echo "Copying JAR to build directory..."
      cp target/TaskService-0.0.1-SNAPSHOT.jar build/
      
      echo "Copying wallet..."
      cp -r wallet/* build/wallet/ 2>/dev/null || true
      
      echo "Creating Dockerfile..."
      cat > Dockerfile << 'EOF'
        FROM eclipse-temurin:23-jre
        
        WORKDIR /app
        
        RUN mkdir -p /wallet
        
        COPY build/TaskService-0.0.1-SNAPSHOT.jar /app/app.jar
        COPY build/wallet/ /wallet/
        
        RUN chmod 755 /app/app.jar
        RUN chmod 600 /wallet/* 2>/dev/null || true
        
        ENV TNS_ADMIN=/wallet
        ENV ORACLE_HOME=/wallet
        ENV LD_LIBRARY_PATH=/wallet
        
        EXPOSE 8081
        
        ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app/app.jar"]
        EOF
        
        echo "‚úÖ Docker build context prepared"
        echo "üìã Build directory contents:"
        ls -la build/

  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 900
    command: |
      # Generar versi√≥n √∫nica
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      docker build --no-cache -t "${IMAGE_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed"
        exit 1
      fi
      
      echo "‚úÖ Docker image built successfully!"
      
      # Exportar variables
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "üéØ IMAGE_FULL_NAME=${IMAGE_FULL_NAME}"
      echo "üéØ VERSION=${VERSION}"
      
      echo "============================================"
      echo "‚úÖ TASKSERVICE BUILD COMPLETED!"
      echo "üì¶ Image: ${IMAGE_FULL_NAME}"
      echo "üöÄ Ready for deliver-image stage"
      echo "============================================"

outputArtifacts:
  - name: task-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}