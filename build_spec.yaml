version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "task-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Recreate wallet files from secrets"
    timeoutInSeconds: 300
    command: |
      echo "üìÅ Creating wallet files from secrets..."
      
      # Crear directorios
      mkdir -p wallet
      
      # Funci√≥n para obtener secrets
      get_secret() {
        local secret_id=$1
        local output_file=$2
      
        echo "Getting secret for: $(basename $output_file)"
      
        local content=$(oci secrets secret-bundle get --secret-id "$secret_id" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$content" ]; then
          echo "WARNING: Failed to get secret $secret_id, creating empty file"
          touch "$output_file"
          return 1
        fi
      
        if echo "$content" | base64 -d > "$output_file" 2>/dev/null; then
          echo "‚úÖ Secret decoded for $(basename $output_file)"
        else
          echo "$content" > "$output_file"
          echo "‚úÖ Secret saved for $(basename $output_file)"
        fi
      }
      
      # Obtener SOLO archivos esenciales del wallet (SIN JKS)
      get_secret "$WALLET_CWALLET_SSO_OCID" "wallet/cwallet.sso" || true
      get_secret "$WALLET_TNSNAMES_ORA_OCID" "wallet/tnsnames.ora" || true
      get_secret "$WALLET_SQLNET_ORA_OCID" "wallet/sqlnet.ora" || true
      get_secret "$WALLET_EWALLET_P12_OCID" "wallet/ewallet.p12" || true
      get_secret "$WALLET_OJDBC_PROPERTIES_OCID" "wallet/ojdbc.properties" || true
      get_secret "$WALLET_EWALLET_PEM_OCID" "wallet/ewallet.pem" || true
      get_secret "$WALLET_README_OCID" "wallet/README" || true
      
      echo "‚ö†Ô∏è EXPLICITLY SKIPPING keystore.jks and truststore.jks to avoid SSL errors"
      
      # Crear ojdbc.properties optimizado para WALLET-ONLY
      echo "‚úÖ Creating WALLET-ONLY ojdbc.properties"
      cat > wallet/ojdbc.properties << 'EOF'
      # Oracle Wallet connection - NO JKS FILES
      oracle.net.wallet_location=(SOURCE=(METHOD=FILE)(METHOD_DATA=(DIRECTORY=${TNS_ADMIN})))
      oracle.net.ssl_client_authentication=false
      oracle.net.ssl_server_dn_match=false
      oracle.net.authentication_services=(TCPS,NTS)
      # Disable JKS lookups
      oracle.net.ssl_keystore_type=NONE
      oracle.net.ssl_truststore_type=NONE
      EOF
      
      # Crear sqlnet.ora optimizado para WALLET-ONLY
      echo "‚úÖ Creating WALLET-ONLY sqlnet.ora"
      cat > wallet/sqlnet.ora << 'EOF'
      WALLET_LOCATION = (SOURCE = (METHOD = file) (METHOD_DATA = (DIRECTORY="/wallet")))
      SSL_SERVER_DN_MATCH=no
      SSL_CLIENT_AUTHENTICATION=false
      NAMES.DIRECTORY_PATH=(TNSNAMES,EZCONNECT)
      SQLNET.AUTHENTICATION_SERVICES=(TCPS,NTS)
      SQLNET.WALLET_OVERRIDE=TRUE
      # Force wallet-only mode
      SSL_CLIENT_AUTHENTICATION=FALSE
      SQLNET.SSL_VERSION=1.2
      EOF
      
      # Verificar que NO existan archivos JKS
      if [ -f "wallet/keystore.jks" ] || [ -f "wallet/truststore.jks" ]; then
        echo "‚ùå Removing JKS files to prevent SSL errors"
        rm -f wallet/keystore.jks wallet/truststore.jks
      fi
      
      # Configurar permisos
      chmod 600 wallet/* 2>/dev/null || true
      
      echo "üìã Final wallet files (NO JKS):"
      ls -la wallet/
      
      # Verificar contenido de archivos cr√≠ticos
      echo "üîç Verifying wallet files integrity:"
      for file in wallet/cwallet.sso wallet/ewallet.p12; do
        if [ -f "$file" ]; then
          size=$(stat -c%s "$file")
          echo "  $file: $size bytes"
          if [ $size -eq 0 ]; then
            echo "    ‚ö†Ô∏è WARNING: $file is empty!"
          fi
        fi
      done

  - type: Command
    name: "Modify application.properties"
    timeoutInSeconds: 60
    command: |
      if [ -f "src/main/resources/application.properties" ]; then
        echo "üîß Modifying application.properties..."
      
        cp src/main/resources/application.properties src/main/resources/application.properties.backup
      
        sed -i 's|TNS_ADMIN=C:/Users/cesar/Wallet_TelegramBotDatabase|TNS_ADMIN=/wallet|g' src/main/resources/application.properties
      
        echo "‚úÖ application.properties modified successfully"
        cat src/main/resources/application.properties
      else
        echo "‚ö†Ô∏è application.properties not found, skipping modification"
      fi

  - type: Command
    name: "Setup Java and Build with Maven"
    timeoutInSeconds: 900
    command: |
      echo "üîß Installing Amazon Corretto 23..."
      
      cd /opt
      
      # Descargar Amazon Corretto 23
      wget -q https://corretto.aws/downloads/latest/amazon-corretto-23-x64-linux-jdk.tar.gz
      
      if [ -f "amazon-corretto-23-x64-linux-jdk.tar.gz" ]; then
        tar -xzf amazon-corretto-23-x64-linux-jdk.tar.gz
        JAVA_DIR=$(find /opt -maxdepth 1 -name "amazon-corretto-23*" -type d | head -1)
        export JAVA_HOME="$JAVA_DIR"
        export PATH="$JAVA_HOME/bin:$PATH"
        echo "‚úÖ Amazon Corretto 23 installed: $JAVA_DIR"
      else
        echo "‚ùå Corretto 23 download failed, trying Eclipse Temurin 23..."
      
        wget -q https://github.com/adoptium/temurin23-binaries/releases/download/jdk-23.0.1%2B11/OpenJDK23U-jdk_x64_linux_hotspot_23.0.1_11.tar.gz
        if [ -f "OpenJDK23U-jdk_x64_linux_hotspot_23.0.1_11.tar.gz" ]; then
          tar -xzf OpenJDK23U-jdk_x64_linux_hotspot_23.0.1_11.tar.gz
          JAVA_DIR=$(find /opt -maxdepth 1 -name "jdk-23*" -type d | head -1)
          export JAVA_HOME="$JAVA_DIR"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "‚úÖ Eclipse Temurin 23 installed: $JAVA_DIR"
        else
          echo "‚ùå All Java 23 downloads failed"
          exit 1
        fi
      fi
      
      echo "‚òï Java version:"
      java -version
      
      cd $OCI_PRIMARY_SOURCE_DIR
      
      echo "üöÄ Building with Maven (Java 23)..."
      mvn clean package -DskipTests \
          -Dmaven.compiler.source=23 \
          -Dmaven.compiler.target=23 \
          -Dmaven.compiler.release=23
      
      if [ ! -f "target/TaskService-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚ùå JAR file not found!"
        echo "Target directory contents:"
        ls -la target/ || echo "No target directory"
        echo "Checking for alternative JAR names:"
        find target/ -name "*.jar" 2>/dev/null || echo "No JAR files found"
        exit 1
      fi
      
      JAR_SIZE=$(stat -c%s "target/TaskService-0.0.1-SNAPSHOT.jar")
      echo "üì¶ JAR size: $JAR_SIZE bytes"
      
      echo "‚úÖ Maven build successful!"

  - type: Command
    name: "Prepare Docker build"
    timeoutInSeconds: 120
    command: |
      mkdir -p build build/wallet
      
      cp target/TaskService-0.0.1-SNAPSHOT.jar build/
      cp -r wallet/* build/wallet/ 2>/dev/null || true
      
      echo "Creating Dockerfile with wallet-only configuration..."
      cat > Dockerfile << 'EOF'
      # Usar Amazon Corretto 23 para evitar rate limits de Docker Hub
      FROM amazoncorretto:23
      
      # Mostrar versi√≥n de Java para verificar
      RUN java -version
      
      # Establecer directorio de trabajo
      WORKDIR /app
      
      # Crear directorios
      RUN mkdir -p /wallet
      
      # Copiar JAR y wallet
      COPY build/TaskService-0.0.1-SNAPSHOT.jar /app/app.jar
      COPY build/wallet/ /wallet/
      
      # Verificar archivos copiados
      RUN echo "===== Contenido de /app ====="
      RUN ls -la /app/
      
      RUN echo "===== Contenido de /wallet ====="
      RUN ls -la /wallet/
      
      # Verificar que NO hay archivos JKS
      RUN if [ -f "/wallet/keystore.jks" ] || [ -f "/wallet/truststore.jks" ]; then \
            echo "ERROR: JKS files found - removing them"; \
            rm -f /wallet/keystore.jks /wallet/truststore.jks; \
          fi
      
      # Establecer permisos expl√≠citos
      RUN chmod 755 /app/app.jar
      RUN chmod 600 /wallet/* 2>/dev/null || true
      
      # Configurar variables de entorno para WALLET-ONLY
      ENV TNS_ADMIN=/wallet
      ENV ORACLE_HOME=/wallet
      ENV LD_LIBRARY_PATH=/wallet
      # Forzar uso de wallet solamente
      ENV ORACLE_NET_WALLET_LOCATION=/wallet
      
      # Puerto de la aplicaci√≥n
      EXPOSE 8081
      
      # Comando de inicio con par√°metros para debugging SSL
      ENTRYPOINT ["java", \
        "-Djava.security.egd=file:/dev/./urandom", \
        "-Doracle.net.ssl_client_authentication=false", \
        "-Doracle.net.ssl_server_dn_match=false", \
        "-DTNS_ADMIN=/wallet", \
        "-jar", "/app/app.jar"]
      EOF
      
      echo "‚úÖ Docker build context prepared (WALLET-ONLY)"
      ls -la build/

  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 900
    command: |
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      docker build --no-cache -t "${IMAGE_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed"
        exit 1
      fi
      
      # Probar la imagen localmente
      echo "üß™ Testing image locally..."
      docker run --name test-container -d "${IMAGE_TAG}"
      
      echo "Logs del contenedor de prueba (primeros 15 segundos):"
      sleep 15
      docker logs test-container || echo "Error al obtener logs"
      
      echo "Limpiando contenedor de prueba..."
      docker rm -f test-container || echo "Error al eliminar contenedor"
      
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "‚úÖ TASKSERVICE BUILD COMPLETED (WALLET-ONLY)!"
      echo "üì¶ Image: ${IMAGE_FULL_NAME}"

outputArtifacts:
  - name: task-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}