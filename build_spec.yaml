version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "task-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Recreate wallet files from secrets"
    timeoutInSeconds: 300
    command: |
      echo "üìÅ Creating wallet files from secrets..."
      
      # Crear directorios
      mkdir -p wallet
      
      # Funci√≥n para obtener secrets
      get_secret() {
        local secret_id=$1
        local output_file=$2
      
        echo "Getting secret for: $(basename $output_file)"
      
        local content=$(oci secrets secret-bundle get --secret-id "$secret_id" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$content" ]; then
          echo "WARNING: Failed to get secret $secret_id, creating empty file"
          touch "$output_file"
          return 1
        fi
      
        if echo "$content" | base64 -d > "$output_file" 2>/dev/null; then
          echo "‚úÖ Secret decoded for $(basename $output_file)"
        else
          echo "$content" > "$output_file"
          echo "‚úÖ Secret saved for $(basename $output_file)"
        fi
      }
      
      # Obtener archivos del wallet (SIN JKS)
      get_secret "$WALLET_CWALLET_SSO_OCID" "wallet/cwallet.sso" || true
      get_secret "$WALLET_TNSNAMES_ORA_OCID" "wallet/tnsnames.ora" || true
      get_secret "$WALLET_SQLNET_ORA_OCID" "wallet/sqlnet.ora" || true
      get_secret "$WALLET_EWALLET_P12_OCID" "wallet/ewallet.p12" || true
      get_secret "$WALLET_OJDBC_PROPERTIES_OCID" "wallet/ojdbc.properties" || true
      get_secret "$WALLET_EWALLET_PEM_OCID" "wallet/ewallet.pem" || true
      get_secret "$WALLET_README_OCID" "wallet/README" || true
      
      echo "‚ö†Ô∏è SKIPPING keystore.jks and truststore.jks (not needed)"
      
      # Crear ojdbc.properties optimizado (SIN JKS)
      echo "‚úÖ Creating optimized ojdbc.properties"
      cat > wallet/ojdbc.properties << 'EOF'
      # Connection property while using Oracle wallets - WALLET ONLY
      oracle.net.wallet_location=(SOURCE=(METHOD=FILE)(METHOD_DATA=(DIRECTORY=${TNS_ADMIN})))
      
      # DISABLE JKS - prevent Oracle JDBC from looking for them
      oracle.net.ssl_client_authentication=false
      oracle.net.ssl_server_dn_match=false
      oracle.net.authentication_services=(TCPS,NTS)
      EOF
      
      # Crear sqlnet.ora optimizado (SIN JKS)
      echo "‚úÖ Creating optimized sqlnet.ora"
      cat > wallet/sqlnet.ora << 'EOF'
      WALLET_LOCATION = (SOURCE = (METHOD = file) (METHOD_DATA = (DIRECTORY="/wallet")))
      SSL_SERVER_DN_MATCH=no
      SSL_CLIENT_AUTHENTICATION=false
      NAMES.DIRECTORY_PATH=(TNSNAMES,EZCONNECT)
      SQLNET.AUTHENTICATION_SERVICES=(TCPS,NTS)
      SQLNET.WALLET_OVERRIDE=TRUE
      EOF
      
      # Configurar permisos
      chmod 600 wallet/* 2>/dev/null || true
      
      echo "üìã Wallet files created:"
      ls -la wallet/

  - type: Command
    name: "Modify application.properties"
    timeoutInSeconds: 60
    command: |
      if [ -f "src/main/resources/application.properties" ]; then
        echo "üîß Modifying application.properties..."
      
        cp src/main/resources/application.properties src/main/resources/application.properties.backup
      
        sed -i 's|TNS_ADMIN=C:/Users/cesar/Wallet_TelegramBotDatabase|TNS_ADMIN=/wallet|g' src/main/resources/application.properties
      
        echo "‚úÖ application.properties modified successfully"
        cat src/main/resources/application.properties
      else
        echo "‚ö†Ô∏è application.properties not found, skipping modification"
      fi

  - type: Command
    name: "Setup Java and Build with Maven"
    timeoutInSeconds: 900
    command: |
      echo "üîß Setting up Java for build..."
      
      # Intentar usar Java disponible en el sistema
      if command -v java21 >/dev/null 2>&1; then
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
        export PATH=$JAVA_HOME/bin:$PATH
        echo "‚úÖ Using Java 21 (compatible with Java 23 code)"
      elif command -v java17 >/dev/null 2>&1; then
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
        export PATH=$JAVA_HOME/bin:$PATH
        echo "‚úÖ Using Java 17 (will compile as Java 21)"
      else
        echo "üîß Installing Java 21 (stable alternative to Java 23)..."
        yum install -y java-21-openjdk-devel || dnf install -y java-21-openjdk-devel || apt-get install -y openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
        export PATH=$JAVA_HOME/bin:$PATH
      fi
      
      echo "‚òï Java version:"
      java -version
      
      echo "üöÄ Building with Maven..."
      mvn clean package -DskipTests \
          -Dmaven.compiler.source=21 \
          -Dmaven.compiler.target=21 \
          -Dmaven.compiler.release=21
      
      if [ ! -f "target/TaskService-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚ùå JAR file not found!"
        exit 1
      fi
      
      echo "‚úÖ Maven build successful!"

  - type: Command
    name: "Prepare Docker build"
    timeoutInSeconds: 120
    command: |
      mkdir -p build build/wallet
      
      cp target/TaskService-0.0.1-SNAPSHOT.jar build/
      cp -r wallet/* build/wallet/ 2>/dev/null || true
      
      echo "Creating Dockerfile..."
      cat > Dockerfile << 'EOF'
      FROM openjdk:21-jre-slim
      
      WORKDIR /app
      
      RUN mkdir -p /wallet
      
      COPY build/TaskService-0.0.1-SNAPSHOT.jar /app/app.jar
      COPY build/wallet/ /wallet/
      
      RUN chmod 755 /app/app.jar
      
      ENV TNS_ADMIN=/wallet
      ENV ORACLE_HOME=/wallet
      ENV LD_LIBRARY_PATH=/wallet
      
      EXPOSE 8081
      
      ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app/app.jar"]
      EOF
      
      echo "‚úÖ Docker build context prepared"
      ls -la build/

  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 900
    command: |
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      docker build --no-cache -t "${IMAGE_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed"
        exit 1
      fi
      
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "‚úÖ TASKSERVICE BUILD COMPLETED!"
      echo "üì¶ Image: ${IMAGE_FULL_NAME}"

outputArtifacts:
  - name: task-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}